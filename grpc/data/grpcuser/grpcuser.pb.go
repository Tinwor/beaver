// Code generated by protoc-gen-go.
// source: grpcuser.proto
// DO NOT EDIT!

/*
Package grpcuser is a generated protocol buffer package.

It is generated from these files:
	grpcuser.proto

It has these top-level messages:
	LoginRequest
	RegisterUser
	Response
	UserByGuid
*/
package grpcuser

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UserStatusResponse int32

const (
	UserStatusResponse_OK               UserStatusResponse = 0
	UserStatusResponse_CREDENTIAL_EXIST UserStatusResponse = 2
	UserStatusResponse_FAILED           UserStatusResponse = 3
	UserStatusResponse_SERVER_ERROR     UserStatusResponse = 4
)

var UserStatusResponse_name = map[int32]string{
	0: "OK",
	2: "CREDENTIAL_EXIST",
	3: "FAILED",
	4: "SERVER_ERROR",
}
var UserStatusResponse_value = map[string]int32{
	"OK":               0,
	"CREDENTIAL_EXIST": 2,
	"FAILED":           3,
	"SERVER_ERROR":     4,
}

func (x UserStatusResponse) String() string {
	return proto.EnumName(UserStatusResponse_name, int32(x))
}
func (UserStatusResponse) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type LoginRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LoginRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type RegisterUser struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	Salt     string `protobuf:"bytes,3,opt,name=salt" json:"salt,omitempty"`
	Email    string `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
	Guid     string `protobuf:"bytes,5,opt,name=guid" json:"guid,omitempty"`
}

func (m *RegisterUser) Reset()                    { *m = RegisterUser{} }
func (m *RegisterUser) String() string            { return proto.CompactTextString(m) }
func (*RegisterUser) ProtoMessage()               {}
func (*RegisterUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RegisterUser) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *RegisterUser) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *RegisterUser) GetSalt() string {
	if m != nil {
		return m.Salt
	}
	return ""
}

func (m *RegisterUser) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *RegisterUser) GetGuid() string {
	if m != nil {
		return m.Guid
	}
	return ""
}

type Response struct {
	Token  string             `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Status UserStatusResponse `protobuf:"varint,2,opt,name=status,enum=UserStatusResponse" json:"status,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Response) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Response) GetStatus() UserStatusResponse {
	if m != nil {
		return m.Status
	}
	return UserStatusResponse_OK
}

type UserByGuid struct {
	Token  string             `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Status UserStatusResponse `protobuf:"varint,2,opt,name=status,enum=UserStatusResponse" json:"status,omitempty"`
}

func (m *UserByGuid) Reset()                    { *m = UserByGuid{} }
func (m *UserByGuid) String() string            { return proto.CompactTextString(m) }
func (*UserByGuid) ProtoMessage()               {}
func (*UserByGuid) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UserByGuid) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *UserByGuid) GetStatus() UserStatusResponse {
	if m != nil {
		return m.Status
	}
	return UserStatusResponse_OK
}

func init() {
	proto.RegisterType((*LoginRequest)(nil), "LoginRequest")
	proto.RegisterType((*RegisterUser)(nil), "RegisterUser")
	proto.RegisterType((*Response)(nil), "Response")
	proto.RegisterType((*UserByGuid)(nil), "UserByGuid")
	proto.RegisterEnum("UserStatusResponse", UserStatusResponse_name, UserStatusResponse_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for User service

type UserClient interface {
	UserLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Response, error)
	NewUser(ctx context.Context, in *RegisterUser, opts ...grpc.CallOption) (*Response, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) UserLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/User/UserLogin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) NewUser(ctx context.Context, in *RegisterUser, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/User/NewUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserServer interface {
	UserLogin(context.Context, *LoginRequest) (*Response, error)
	NewUser(context.Context, *RegisterUser) (*Response, error)
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserLogin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_NewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).NewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/NewUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).NewUser(ctx, req.(*RegisterUser))
	}
	return interceptor(ctx, in, info, handler)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserLogin",
			Handler:    _User_UserLogin_Handler,
		},
		{
			MethodName: "NewUser",
			Handler:    _User_NewUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcuser.proto",
}

func init() { proto.RegisterFile("grpcuser.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x52, 0x4f, 0x4f, 0xfa, 0x40,
	0x10, 0xe5, 0x4f, 0xe9, 0x0f, 0x26, 0x40, 0x9a, 0xf9, 0x71, 0x68, 0x38, 0x99, 0x26, 0x46, 0xa3,
	0x49, 0x0f, 0xf8, 0x09, 0x50, 0x16, 0x43, 0x44, 0x30, 0x0b, 0x12, 0x6f, 0xa4, 0xca, 0xa4, 0x69,
	0x84, 0x6e, 0xdd, 0xdd, 0x86, 0x78, 0xf7, 0x83, 0x9b, 0xdd, 0x52, 0x83, 0xf1, 0x66, 0x3c, 0xed,
	0xbc, 0x79, 0x6f, 0xe6, 0x6d, 0xf6, 0x2d, 0x74, 0x63, 0x99, 0xbd, 0xe4, 0x8a, 0x64, 0x98, 0x49,
	0xa1, 0x45, 0x30, 0x86, 0xf6, 0x54, 0xc4, 0x49, 0xca, 0xe9, 0x2d, 0x27, 0xa5, 0xb1, 0x0f, 0x4d,
	0xc3, 0xa6, 0xd1, 0x8e, 0xfc, 0xea, 0x49, 0xf5, 0xbc, 0xc5, 0xbf, 0xb0, 0xe1, 0xb2, 0x48, 0xa9,
	0xbd, 0x90, 0x1b, 0xbf, 0x56, 0x70, 0x25, 0x0e, 0x3e, 0xaa, 0xd0, 0xe6, 0x14, 0x27, 0x4a, 0x93,
	0x7c, 0x54, 0x24, 0x7f, 0xbb, 0x08, 0x11, 0x1c, 0x15, 0x6d, 0xb5, 0x5f, 0xb7, 0x7d, 0x5b, 0x63,
	0x0f, 0x1a, 0xb4, 0x8b, 0x92, 0xad, 0xef, 0xd8, 0x66, 0x01, 0x8c, 0x32, 0xce, 0x93, 0x8d, 0xdf,
	0x28, 0x94, 0xa6, 0x0e, 0xee, 0xa1, 0xc9, 0x49, 0x65, 0x22, 0x55, 0x64, 0xa6, 0xb4, 0x78, 0xa5,
	0xf4, 0x60, 0x5f, 0x00, 0xbc, 0x04, 0x57, 0xe9, 0x48, 0xe7, 0xca, 0x3a, 0x77, 0x07, 0xff, 0x43,
	0x73, 0xdd, 0x85, 0x6d, 0x95, 0xa3, 0xfc, 0x20, 0x09, 0xe6, 0x00, 0x86, 0xbd, 0x7e, 0xbf, 0xcd,
	0x93, 0xcd, 0x1f, 0x2c, 0xbc, 0x78, 0x00, 0xfc, 0xc9, 0xa2, 0x0b, 0xb5, 0xf9, 0x9d, 0x57, 0xc1,
	0x1e, 0x78, 0x37, 0x9c, 0x8d, 0xd8, 0x6c, 0x39, 0x19, 0x4e, 0xd7, 0xec, 0x69, 0xb2, 0x58, 0x7a,
	0x35, 0x04, 0x70, 0xc7, 0xc3, 0xc9, 0x94, 0x8d, 0xbc, 0x3a, 0x7a, 0xd0, 0x5e, 0x30, 0xbe, 0x62,
	0x7c, 0xcd, 0x38, 0x9f, 0x73, 0xcf, 0x19, 0xac, 0xc0, 0xb1, 0xef, 0x7d, 0x06, 0x2d, 0x73, 0xda,
	0x30, 0xb1, 0x13, 0x1e, 0x87, 0xda, 0x6f, 0x85, 0xa5, 0x55, 0x50, 0xc1, 0x53, 0xf8, 0x37, 0xa3,
	0xbd, 0x9d, 0xe9, 0x84, 0xc7, 0x91, 0x7d, 0x93, 0x3d, 0xbb, 0xf6, 0x7f, 0x5c, 0x7d, 0x06, 0x00,
	0x00, 0xff, 0xff, 0x7e, 0xa9, 0x7c, 0xee, 0x31, 0x02, 0x00, 0x00,
}
